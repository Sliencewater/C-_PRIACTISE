#include <iostream>
using namespace std;
#include <string>
/*用顺序队列已经实现，试用链队
下面为链队代码
*/
typedef struct BiTNode{
	
	int data;
	
	BiTNode *lchild, *rchild;
	
		
}BiTNode, *BiTree;


void InitBiTree(BiTree &T)
{
	T = NULL;
}





void DestroyBiTree(BiTree &T)
{
	if (T)
	{
		DestroyBiTree(T->lchild);
		DestroyBiTree(T->rchild);
		delete T;
	}
}
void CreateBiTree(BiTree &T)//输入data为0，则代表不存在。
{
	int a;
	cin >> a;
	if (a == 0)
	{
		T = NULL;
	}
	else
	{
		T = new BiTNode;
		CreateBiTree(T->lchild);
		CreateBiTree(T->rchild);
		T->data = a;
	}
}
void InOrderTraverse(BiTree &T)
{
	if (T)
	{
		InOrderTraverse(T->lchild);

		cout << T->data << endl;

		InOrderTraverse(T->rchild);
	}

}
void PostOrderTraverse(BiTree &T)
{
	if (T)
	{
		PostOrderTraverse(T->lchild);

		PostOrderTraverse(T->rchild);

		cout << T->data << endl;
	}

}
void PreOrderTraverse(BiTree &T)
{
	if (T)
	{
		cout << T->data << endl;

		PreOrderTraverse(T->lchild);

		PreOrderTraverse(T->rchild);

	}

}


void LevelorderTraverse(BiTree &T)
{
	BiTNode *p[50];
	p[0] = T;
	int front = 0;
	int rear = 1;
	while (front<rear)
	{
		if (p[front])
		{
			cout << p[front]->data << ' ';

			p[rear++] = p[front]->lchild;

			p[rear++] = p[front]->rchild;

		}
		front++;

	}
}

void Copy(BiTree T, BiTree &NewT)
{
	if (T == NULL)
	{
		NewT = NULL;
	}
	else
	{
		NewT = new BiTNode;
		NewT->data = T->data;
		Copy(T->lchild, NewT->lchild);
		Copy(T->rchild, NewT->rchild);
	}
}
int Depth(BiTree T)
{
	int m, n;
	if (T == NULL)
	{
		return 0;
	}
	else
	{
		m = Depth(T->lchild);
		n = Depth(T->rchild);
		if (m > n)
			return(m + 1);
		else
			return (n + 1);
		
	}
}
int NodeCount(BiTree T)
{
	if (T == NULL)
	{
		return 0;
	}
	else
	{
		return NodeCount(T->lchild) + NodeCount(T->rchild) + 1;
	}
}

int _tmain(int argc, _TCHAR* argv[])
{

	BiTree T;
	InitBiTree(T);
	CreateBiTree(T);
	//InOrderTraverse(T);
	
	LevelorderTraverse(T);
	return 0;
}

