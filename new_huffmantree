//
//  text_.cpp
//  temp_c
//
//  Created by 李可小 on 5/5/16.
//  Copyright © 2016 李可小. All rights reserved.
//
#ifndef text__hpp
#define text__hpp

#include <iostream>
#include <string>
#include <vector>
#include <string>
using namespace std;

#endif /* text__hpp */

#include "text_.hpp"
typedef char ** Huffmancode;
typedef struct {
    int weight;
    int parent,lchild,rchild;
}HTNode,*HuffmanTree;
void select(HuffmanTree HT,int i,int &s1,int &s2)
{
    s1 = s2 =1;
    for (int j=2; j<=i; j++) {
        if (HT[s1].weight > HT[j].weight) {
            s1 = j;
        }
    }
    HT[s1].weight = 3200;
    for (int j = 2; j<=i; j++) {
        if (HT[s2].weight > HT[j].weight) {
            s2 = j;
        }

    }
    
}
void CreateHuffmanTree(HuffmanTree &HT, int n)
{
    int m=2*n - 1;
    HT = new HTNode[m+1];
    for (int i = 1; i<=m; ++i) {
        HT[i].parent = 0;
        HT[i].lchild = 0;
        HT[i].rchild = 0;
    }
    for (int i = 1; i <= n; ++i) {
        cin >>HT[i].weight;
    }
    for (int i = n + 1; i <=m; ++i) {
        int s1,s2;
        select(HT,i-1,s1,s2);
        HT[s1].parent = i ;
        HT[s2].parent = i ;
        HT[i].lchild = s1;
        HT[i].rchild = s2;
        HT[i].weight = HT[s1].weight + HT[s2].weight;
    }
}
void CreatHuffmanCode(HuffmanTree HT,Huffmancode &HC,int n)
{
    HC = new char * [n+1];
    char * cd = new char[n];
    cd[n-1] = '\0';
    for (int i = 1; i<=n ; ++i) {
        int start = n - 1,c,f ;
        c = i;
        f = HT[i].parent;
        while (f != 0) {
            --start;
            if (HT[f].lchild == c) {
                cd[start] = '0';
            }
            else cd[start] = '1';
            c = f;
            f = HT[f].parent;
        }
        HC[i] = new char[n-start];
        strcpy(HC[i], &cd[start]);
    }
    delete cd;
    
}
